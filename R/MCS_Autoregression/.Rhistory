y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
forecast_errors(y, 1, 1, 1:8, real.order)
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
forecast_errors(y, 1, 1, 1:8, real.order)
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
forecast_errors(y, 1, 1, 1:8, real.order)
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
forecast_errors(y, 1, 1, 1:8, real.order)
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
forecast_errors(y, 1, 1, 1:8, real.order)
#--------------------------------
#actual research
phi <-  c(0.8, .25, -0.4, 0.1, -0.3, 0.2, 0.2, -0.1, -0.05, 0.15)
phi = isStationer(phi)
real.order = length(phi)
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:250) {
y = arima.sim(n = 2000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 10, 1, 1:20))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
if(j %% 10==0) print(j)
}
real.order
for (j in 1:250) {
y = arima.sim(n = 2000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 10, 1, 1:20, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
if(j %% 10==0) print(j)
}
t = mean(errs$MCS-errs$grid)/sqrt(var((errs$MCS-errs$grid)))
t
errs$diff = errs$MCS < errs$grid
sum(errs$diff)
var(errs$MCS)
var(errs$grid)
#--------------------------------
#actual research
phi <-  c(0.8, .25, -0.4, 0.1, -0.3, 0.2, 0.2, -0.1, -0.05, 0.15)
phi = isStationer(phi)
real.order = length(phi)
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:1000) {
y = arima.sim(n = 2000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 10, 1, 1:20, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
if(j %% 10==0) print(j)
}
t = mean(errs$MCS-errs$grid)/sqrt(var((errs$MCS-errs$grid)))
t
errs$diff = errs$MCS < errs$grid
sum(errs$diff)
var(errs$MCS)
var(errs$grid)
#parameter declarations for the AR process
#alpha is the intercept, phi is the coeff vector. Phi can be any long
#sigma2 is the variance
alpha <- 5
phi <-  c(0.8, .25, -0.4, 0.1) # phi_1, phi_2, phi_3. order matters!
isStationer <- function(phi) {
if (min(abs(polyroot(c(1, -phi)))) <=1) {
print('Phi does not describe a stationary process')
phi = as.double(strsplit(readline("Define a new phi vector, with the following format: phi1,phi2,..."), ",")[[1]])
return (isStationer(phi))
} else return(phi)
}
phi = isStationer(phi)
sigma2 <- 1.2
real.order = length(phi)
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 1, 1, 1:8, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
if(j %% 10==0) print(j)
}
t = mean(errs$MCS-errs$grid)/sqrt(var((errs$MCS-errs$grid)))
t
errs$diff = errs$MCS < errs$grid
sum(errs$diff)
var(errs$MCS)
var(errs$grid)
y = c(21.74140, 19.96435, 20.28467, 17.59056, 17.03285, 18.61179, 18.94180, 19.50174,
21.0972, 19.99075, 19.87217, 18.67909, 19.07995, 19.89866, 21.01330, 19.69140,
19.15740, 18.25253, 17.44127, 19.55933)
#-------------------------------------------------------------
resid_generator <- function(y, i_vec, n.ahead) {
### y is the autoregression
### i_vec is a vector with the possible orders, e.g 1:8 if the real order is p=4
### returns n.ahead prediction residual terms
pars <- vector(mode="list", length=length(i_vec))
names(pars) = i_vec
coeffs <- vector(mode="list", length=length(i_vec))
names(coeffs) = i_vec
u = head(y, length(y) - n.ahead)
for (k in i_vec) {
parms <- estimator(u, k)
forecast = pred.n.ahead(u, n.ahead, parms[[1]])
coeffs[[k]] = parms
pars[[k]] = (tail(forecast, n.ahead) - tail(y, n.ahead))^2
}
return (list(as.data.frame(pars), coeffs)) }
resid_generator(y, 1:8, 1)
a=resid_generator(y, 1:8, 1)
a[[1]]
k=1
u = head(y, length(y) - n.ahead)
parms <- estimator(u, k)
parms[[1]]
u
n.ahead
n.ahead=1
u = head(y, length(y) - n.ahead)
u
parms <- estimator(u, k)
parms[[1]]
u
k
parms <- estimator(u, k)
parms
y
n.ahead
u = head(y, length(y) - n.ahead)
parms <- estimator(u, k)
parms
a[[1]]
a[[2]]
test.period=1
### final comparison based on grid search and MCS predictions
### i_vec is the grid in increasing order
u = head(y, length(y) - test.period)
u
resid_generator(u)[[1]]
resid_generator(u, 1:8)[[1]]
resid_generator(u, 1:8, 1)[[1]]
parms = grid_search(u, n.ahead, i_vec)
parms[[1]]
parms[[2]]
parms[[2]][[1]]
parms[[1]]
forecast_grid = pred.n.ahead(u, test.period, parms[[1]][[1]])
forecast_grid
tail(y, test.period)
real.order=4
real.order=0
mcs_i = tail(i_vec, sum(i_vec >= real.order))
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k]][[1]])
}
forecast_MCS = as.data.frame(forecast_MCS)
real.order
forecast_MCS
mcs_i = tail(i_vec, sum(i_vec >= real.order))
i_vec
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
}
parms[[2]][[2]]
parms[[2]][[2]][[1]]
parms[[2]][[2]][[2]]
parms[[2]][[2]][[10]]
mcs_i
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
print(k)
}
k
k-real.order+1
real.order=1
mcs_i = tail(i_vec, sum(i_vec >= real.order))
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
print(k)
}
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
}
forecast_MCS = as.data.frame(forecast_MCS)
error_MCS = tail(apply(forecast_MCS, 2, function(x) x-y), test.period)
error_MCS
error_MCS = apply(error_MCS, 1, function(x) mean(x))^2
error_MCS
error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))^2
error_grid
mean(error_grid)
mean(error_MCS)
forecast_errors <- function(y, n.ahead, test.period, i_vec, real.order) {
### final comparison based on grid search and MCS predictions
### i_vec is the grid in increasing order
u = head(y, length(y) - test.period)
parms = grid_search(u, n.ahead, i_vec)
forecast_grid = pred.n.ahead(u, test.period, parms[[1]][[1]])
error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))^2
mcs_i = tail(i_vec, sum(i_vec >= real.order))
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
}
forecast_MCS = as.data.frame(forecast_MCS)
error_MCS = tail(apply(forecast_MCS, 2, function(x) x-y), test.period)
error_MCS = apply(error_MCS, 1, function(x) mean(x))^2
return(list(mean(error_grid), mean(error_MCS)))
}
alpha
phi
sigma2
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 1, 1, 1:8, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
if(j %% 10==0) print(j)
}
real.order
real.order=4
alpha
phi
sigma2
real.order
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 1, 1, 1:8, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
if(j %% 10==0) print(j)
}
t = mean(errs$MCS-errs$grid)/sqrt(var((errs$MCS-errs$grid)))
t
errs$diff = errs$MCS < errs$grid
sum(errs$diff)
var(errs$MCS)
var(errs$grid)
pt(t, df = 999)
pt(t, df = 99999)
plot(errs$MCS - errs$grid)
plot(errs$MCS - errs$grid, type="l")
errs
apply(errs, 1, mean)
apply(errs, 2, mean)
results = data.frame(matrix(0, nrow=250, ncol=2))
names(results) = c("grid search loss", "MCS loss")
i=1
results[i,]=apply(errs, 2, mean)
errs = errs[,c(1,2)]
errs
results[i,]=apply(errs, 2, mean)
head(results)
forecast_errors <- function(y, n.ahead, test.period, i_vec, real.order) {
### final comparison based on grid search and MCS predictions
### i_vec is the grid in increasing order
u = head(y, length(y) - test.period)
parms = grid_search(u, n.ahead, i_vec)
forecast_grid = pred.n.ahead(u, test.period, parms[[1]][[1]])
error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))^2
mcs_i = tail(i_vec, sum(i_vec >= real.order))
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
}
forecast_MCS = as.data.frame(forecast_MCS)
error_MCS = tail(apply(forecast_MCS, 2, function(x) x-y), test.period)
error_MCS = apply(error_MCS, 1, function(x) mean(x))^2
return(list(mean(error_grid), mean(error_MCS)))
}
forecast_errors <- function(y, n.ahead, test.period, i_vec, real.order) {
### final comparison based on grid search and MCS predictions
### i_vec is the grid in increasing order
u = head(y, length(y) - test.period)
parms = grid_search(u, n.ahead, i_vec)
forecast_grid = pred.n.ahead(u, test.period, parms[[1]][[1]])
#error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))^2
error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))
mcs_i = tail(i_vec, sum(i_vec >= real.order))
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
}
forecast_MCS = as.data.frame(forecast_MCS)
error_MCS = tail(apply(forecast_MCS, 2, function(x) x-y), test.period)
#error_MCS = apply(error_MCS, 1, function(x) mean(x))^2
error_MCS = apply(error_MCS, 1, function(x) mean(x))
return(list(mean(error_grid), mean(error_MCS)))
}
#for example run
n.ahead = 10
test.period=1
i_vec=1:8
real.order = length(phi)
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
forecast_errors(y, 1, 1, 1:1, real.order)
real.order=1
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
forecast_errors(y, 1, 1, 1:1, real.order)
a = c()
for (j in 1:1000){
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
a = c(a, forecast_errors(y, 1, 1, 1:1, real.order)[1])
}
mean(a)
a
forecast_errors(y, 1, 1, 1:1, real.order)[[1]]
a = c()
for (j in 1:1000){
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
a = c(a, forecast_errors(y, 1, 1, 1:1, real.order)[[1]])
}
mean(a)
real.order=4
a = c()
for (j in 1:1000){
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
a = c(a, forecast_errors(y, 1, 1, 4:4, real.order)[[1]])
}
forecast_errors(y, 1, 1, 1:5, real.order)[[1]]
forecast_errors <- function(y, n.ahead, test.period, i_vec, real.order) {
### final comparison based on grid search and MCS predictions
### i_vec is the grid in increasing order
u = head(y, length(y) - test.period)
parms = grid_search(u, n.ahead, i_vec)
#forecast_grid = pred.n.ahead(u, test.period, parms[[1]][[1]])
forecast_grid = pred.n.ahead(u, test.period, parms[[2]][[4]][[1]])
#error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))^2
error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))
mcs_i = tail(i_vec, sum(i_vec >= real.order))
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
}
forecast_MCS = as.data.frame(forecast_MCS)
error_MCS = tail(apply(forecast_MCS, 2, function(x) x-y), test.period)
#error_MCS = apply(error_MCS, 1, function(x) mean(x))^2
error_MCS = apply(error_MCS, 1, function(x) mean(x))
return(list(mean(error_grid), mean(error_MCS)))
}
forecast_errors(y, 1, 1, 1:5, real.order)[[1]]
forecast_errors(y, 1, 1, 1:5, real.order)[[1]]
parms[[2]]
test.period
### final comparison based on grid search and MCS predictions
### i_vec is the grid in increasing order
u = head(y, length(y) - test.period)
parms = grid_search(u, n.ahead, i_vec)
parms[[2]][[4]]
parms[[2]][[2]][[4]][[1]]
forecast_errors <- function(y, n.ahead, test.period, i_vec, real.order) {
### final comparison based on grid search and MCS predictions
### i_vec is the grid in increasing order
u = head(y, length(y) - test.period)
parms = grid_search(u, n.ahead, i_vec)
#forecast_grid = pred.n.ahead(u, test.period, parms[[1]][[1]])
forecast_grid = pred.n.ahead(u, test.period, parms[[2]][[2]][[4]][[1]])
#error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))^2
error_grid = (tail(forecast_grid, test.period) - tail(y, test.period))
mcs_i = tail(i_vec, sum(i_vec >= real.order))
forecast_MCS = vector(mode="list", length=length(mcs_i))
names(forecast_MCS) = mcs_i
for (k in mcs_i) {
forecast_MCS[[k-real.order+1]]= pred.n.ahead(u, test.period, parms[[2]][[2]][[k-real.order+1]][[1]])
}
forecast_MCS = as.data.frame(forecast_MCS)
error_MCS = tail(apply(forecast_MCS, 2, function(x) x-y), test.period)
#error_MCS = apply(error_MCS, 1, function(x) mean(x))^2
error_MCS = apply(error_MCS, 1, function(x) mean(x))
return(list(mean(error_grid), mean(error_MCS)))
}
forecast_errors(y, 1, 1, 1:5, real.order)[[1]]
a = c()
for (j in 1:1000){
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
a = c(a, forecast_errors(y, 1, 1, 1:5, real.order)[[1]])
}
mean(a)
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R/Covid19_Prediction")
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R/Covid19_Prediction")
load("covidPred_secondoptim.RData")
library(ggplot2)
library(plotly)
library(lubridate)
Loss
#Some explanatory figures about the best fitting model
best_model = c(3,4)
source(path(best_model[1],best_model[2]))
parms <- coeffs[[ 5*(best_model[1]-1) + best_model[2] ]]
a=mn_dataframe(parms)
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
names(cases) = c("Date", "Actual")
cases = cbind(case, a)
cases = cbind(cases, a)
View(cases)
plot(cases$I_S+cases$Q+cases$R)
cases = cases[, c("Date", "S", "I_S", "I_A", "S_Q", "Q")]
cases <- melt(cases ,  id.vars = 'Date', variable.name = 'series')
ggplot(cases, aes(Date,value)) + geom_line() + facet_grid(series ~ .)
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
names(cases) = c("Date", "Actual")
cases = cbind(cases, a)
cases = cases[, c("Date", "S", "I_S", "I_A", "S_Q", "Q")]
plot(cases$Q)
plot(cases$S)
plot(cases$S_Q)
plot(cases$I_S)
plot(cases$I_A)
plot(cases$I_S)
p_S <- ggplot(data=cases, aes(x=Date))+
geom_line(aes(y=S, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Total confirmed cases, N.Y state, U.S.A")
p_S
p_S <- ggplot(data=cases, aes(x=Date))+
geom_line(aes(y=S, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
p_S
p_S_Q <- ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=S_Q, colour="Susceptible quarantine"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible quarantine class, N.Y state, U.S.A")
p_S_Q
p_S <- ggplot(data=cases, aes(x=Date))++guides(color = FALSE, size = FALSE)+
geom_line(aes(y=S, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
p_S
p_I_S <- ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S, colour="Susceptible quarantine"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Symptotic infectious class, N.Y state, U.S.A")
p_I_S
p_I_A <- ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_A, colour="Susceptible quarantine"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Asymptotic infectious class, N.Y state, U.S.A")
p_I_A
p_I <- ggplot(data=cases, aes(x=Date))+
geom_line(aes(y=I_A, colour="Asymptotic infectious"))+
geom_line(aes(y=I_S, colour="Symptotic infectious"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Infectious class, N.Y state, U.S.A")
p_I
p_Q <- ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=Q, colour="Asymptotic infectious"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Infectious quarantine class, N.Y state, U.S.A")
p_Q
view(cases)
View(cases)
p_S <- ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=S, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
p_S
p_S_Q
p_I
p_Q
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
names(cases) = c("Date", "Actual")
cases = cbind(cases, a)
cases = cases[, c("Date", "S", "I_S", "I_A", "S_Q", "Q", "E")]
p_E <- ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=E1+E2+E3, colour="Asymptotic infectious"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Exposed class, N.Y state, U.S.A")
p_E
p_I
getwd()
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R/MCS_Autoregression")
load("MLE_AR.RData")
p1
head(results)
p1
p = ggplot(data = results, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_point()
p
p = ggplot(data = results, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_point()+
geom_abline()
p
ggplotly(p, dynamicTicks = T)
ggplotly(p_S, dynamicTicks = T)
ggplotly(p_S_Q, dynamicTicks = T)
ggplotly(p_I, dynamicTicks = T)
ggplotly(p_Q, dynamicTicks = T)
ggplotly(p_E, dynamicTicks = T)
