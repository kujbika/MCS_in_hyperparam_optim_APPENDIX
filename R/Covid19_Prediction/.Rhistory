head(Loss, 8)
which.min(Loss[i, ])
Loss[i, which.min(Loss[i,])]
Loss[i, ]
i
Loss[1, ]
preds[i,]
preds[i-1,]
preds[i+1,]
head(preds)
loss_values <- function(alpha, phi, sigma2) {
# alpha is the intercept of the AR(p)
# phi is the real coeff. vector of the same AR(p)
# this is only run for experimantla purposes, so i_vec here is alwayzs 1:8
loss = data.frame("loss_1" = NA,
"loss_2" = NA,
"loss_3" = NA,
"loss_4" = NA,
"loss_5" = NA,
"loss_6" = NA,
"loss_7" = NA,
"loss_8" = NA)
preds = data.frame("pred_1" = NA,
"pred_2" = NA,
"pred_3" = NA,
"pred_4" = NA,
"pred_5" = NA,
"pred_6" = NA,
"pred_7" = NA,
"pred_8" = NA)
for (k in 1:1000)
{
y = arima.sim(n = 1001, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y[1:(length(y)-1)], 1:8)
loss = rbind(loss, c(resids[[1]]))
outsample = (resids[[2]] - tail(y, 1))^2
preds = rbind(preds, c(outsample))
print(k)
}
return (list(loss[-1,], preds[-1,]))
}
res = loss_values(alpha, phi, sigma2)
Loss=res[[1]]
preds=res[[2]]
head(preds)
head(Loss)
plot(preds$pred_1)
hist(preds$pred_1)
hist(preds$pred_5)
hist(preds$pred_6)
hist(preds$pred_4)
mins=c()
for (i in 1:nrow(Loss)) {
mins=c(mins, preds[i, which.min(Loss[i, ])])
}
hist(mins)
mean(mins)
mins=c()
for (i in 1:nrow(Loss)) {
mins=c(mins, Loss[i, which.min(Loss[i, ])])
}
mean(mins)
mins=c()
for (i in 1:nrow(Loss)) {
mins=c(mins, preds[i, which.min(Loss[i, ])])
}
mean(mins)
grid_search_loss=c()
for (i in 1:nrow(Loss)) {
grid_search_loss=c(grid_search_loss, preds[i, which.min(Loss[i, ])])
}
mean(grid_search_loss)
a=MCSprocedure(Loss, alpha=0.1, cl=cl)
a
a
?MCSprocedure
apply(preds,1,sum)
apply(preds,2,sum)
apply(preds,2,sum)/nrow(preds)
b=apply(preds,2,sum)/nrow(preds)
mean(b[3:8])
a=MCSprocedure(Loss, alpha=0.15, cl=cl)
a
loss_values <- function(alpha, phi, sigma2) {
# alpha is the intercept of the AR(p)
# phi is the real coeff. vector of the same AR(p)
# this is only run for experimantla purposes, so i_vec here is alwayzs 1:8
loss = data.frame("loss_1" = NA,
"loss_2" = NA,
"loss_3" = NA,
"loss_4" = NA,
"loss_5" = NA,
"loss_6" = NA,
"loss_7" = NA,
"loss_8" = NA)
preds = data.frame("pred_1" = NA,
"pred_2" = NA,
"pred_3" = NA,
"pred_4" = NA,
"pred_5" = NA,
"pred_6" = NA,
"pred_7" = NA,
"pred_8" = NA)
for (k in 1:1000)
{
y = arima.sim(n = 1001, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y[1:(length(y)-1)], 1:8)
loss = rbind(loss, c(resids[[1]]))
outsample = (resids[[2]] - tail(y, 1))^2
preds = rbind(preds, c(outsample))
}
Loss=loss[-1,]
preds=preds[-1,]
grid_search_loss=c()
for (i in 1:nrow(Loss)) {
grid_search_loss=c(grid_search_loss, preds[i, which.min(Loss[i, ])])
}
MCS_loss=(apply(preds, 2, sum)/nrow(preds))[4:8]
return (list(grid_search_loss, MCS_loss))
}
alpha
pphi
phi
sigma()
sigma2
preds
Loss
plot(colMeans(Loss), type="l")
plot(colMeans(preds), type="l")
plot(colMeans(Loss), type="l")
plot(colMeans(preds), type="l")
cor(preds)
a = colMeans(preds)
a
str(a)
type(a)
data.frame(a)
data.frame(t(a))
ggplot(data=t(a))+geom_point()
ggplot(data=data.frame(t(a)))+geom_point()
data.frame(a)
ggplot(data=data.frame(a))+geom_point()
ggplot(data=data.frame(a))+geom_point(aes(y=a))
a = data.frame(colMeans(preds))
ggplot(data=a)+geom_point(aes(y=a, x=))
a$colMeans.preds.
a
names(a)=c("model", "los")
names(a)=c("model", "loss")
index(a)
rownames(a)
ggplot(data=a)+geom_point(aes(y=a, x=rownames(a)))
a$model=rownames(a)
names(a)[1]="loss"
a
ggplot(data=a)+geom_point(aes(y=loss, x=model)
)
ggplot(data=a)+geom_line(aes(y=loss, x=model))
ggplot(data=a)+ggline(aes(y=loss, x=model))
ggplot(data=a)+gg_line(aes(y=loss, x=model))
ggplot(data=a)+geom_line(aes(y=loss, x=model))
a
ggplot(data=a)+geom_point(aes(y=loss, x=model))
ggplot(data=a, aes(y=loss, x=model))+geom_point()
ggplot(data=a, aes(y=loss, x=model))+geom_line()
ggplot(data=a, aes(y=loss, x=model, group=1))+geom_line()
Loss
save.image("forplot.RData")
p=ggplot(data=a, aes(y=loss, x=model, group=1))+geom_line()
save.image("forplot.RData")
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R/MCS_Autoregression")
load("MLE_AR.RData")
p
p = ggplot(data = results, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_point()+
geom_abline()
library(ggplot2)
library(MASS)
library (MCS)
library(parallel)
library(data.table)
library(plotly)
p = ggplot(data = results, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_point()+
geom_abline()
p
mean(results$`MCS loss`)
pt(t, df = 249)
t = mean(results$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) * sqrt(250))
t
pt(t, df = 249)
mean(results$MCS-errs$grid)
t = mean(results$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) / sqrt(250))
t
pt(t, df = 249)
t = mean(results$MCS-1.2)/(sqrt(var((errs$MCS))) / sqrt(250))
t
t = mean(results$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) / sqrt(250))
t
pt(t, df = 249)
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 1, 1, 1:8, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
}
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 1, 10, 1:8, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
}
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 1, 10, 1:8, real.order))
names(err)=c("grid", "MCS")
errs = rbind(errs, as.data.frame(err))
}
apply(errs, 2, mean)
t = mean(errs$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) / sqrt(1000))
t
t = mean(results$MCS-errs$grid)/(sqrt(var((results$MCS-results$grid))) / sqrt(250))
t
pt(t, df = 249)
t = mean(errs$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) / sqrt(1000))
pt(t, df = 999)
head(errs)
p = ggplot(data = errs, aes(x=`grid`, y = `MCS`))+
geom_density_2d()+
geom_point()+
geom_abline()
p
p = ggplot(data = errs, aes(x=`grid`, y = `MCS`))+
geom_density_2d()+]
p = ggplot(data = errs, aes(x=`grid`, y = `MCS`))+
geom_density_2d()+
geom_abline()
p
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
comparison = vector(mode="list", length=2)
errs = as.data.frame(comparison)
for (j in 1:10000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
err = as.data.frame(forecast_errors(y, 1, 10, 1:8, real.order))
names(err)=c("grid search loss", "MCS loss")
errs = rbind(errs, as.data.frame(err))
}
t = mean(errs$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) / sqrt(1000))
t = mean(errs$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) / sqrt(10000))
t
p = ggplot(data = errs, aes(x=`grid`, y = `MCS`))+
geom_density_2d()+
geom_point()+
geom_abline()
p
p = ggplot(data = errs, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_point()+
geom_abline()
p
p = ggplot(data = errs, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_abline()
p
mean(errs$`MCS loss`)
t = mean(errs$MCS-errs$grid)/(sqrt(var((errs$MCS-errs$grid))) / sqrt(10000))
head(errs)
t = mean(errs$`MCS loss`-errs$`grid search loss`)/(sqrt(var((errs$`MCS loss`-errs$`grid search loss`))) / sqrt(10000))
t
errs$diff = errs$`MCS loss` < errs$`grid search loss`
sum(errs$diff)
?rbin
?rbinom
pbinom(5258, 1000, 0.5)
pbinom(5258, 10000, 0.5)
rbinom(10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
rbinom(1, 10000, 0.5)
nrow(results)
t = mean(results$MCS-results$grid)/(sqrt(var((results$MCS-results$grid))) / sqrt(250))
t
pt(t, df = 999)
t = mean(errs$`MCS loss`-errs$`grid search loss`)/(sqrt(var((errs$`MCS loss`-errs$`grid search loss`))) / sqrt(10000))
t
errs$diff = errs$`MCS loss` < errs$`grid search loss`
t = mean(results$MCS-results$grid)/(sqrt(var((results$MCS-results$grid))) / sqrt(250))
t
pt(t, df = 249)
t = mean(results$MCS-sigma2)/(sqrt(var((results$MCS))) / sqrt(250))
pt(t, df = 249)
t = mean(errs$`MCS loss`-errs$`grid search loss`)/(sqrt(var((errs$`MCS loss`-errs$`grid search loss`))) / sqrt(10000))
t
pt(t, df =9999)
errs$diff = errs$`MCS loss` < errs$`grid search loss`
pbinom(sum(errs$diff, 10000, 0.5))
pbinom(sum(errs$diff), 10000, 0.5))
pbinom(sum(errs$diff), 10000, 0.5)
p
p = ggplot(data = results, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_point()+
geom_abline()
p
p2 = ggplot(data = errs, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density_2d()+
geom_abline()
p2
p2 = ggplot(data = errs, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density(aes(x=`grid search loss`))
p2
head(errs)
head(cbind(1:10000, errs[,c(1,2)]))
names(df)[1] = "Simulation number"
df = cbind(1:10000, errs[,c(1,2)])
names(df)[1] = "Simulation number"
df <- melt(df ,  id.vars = 'Simulation number', variable.name = 'Loss')
ggplot(df, aes(`Simulation number`,value)) + geom_line(aes(colour = series))
ggplot(df, aes(`Simulation number`,value)) + geom_line(aes(colour = Loss))
ggplot(df, aes(`Simulation number`,value)) + geom_density(aes(colour = Loss))
ggplot(df, aes(`Simulation number`,value)) +
geom_density(aes(x=`Simulation number`, colour = Loss))
ggplot(df, aes(`Simulation number`,value)) +
geom_density(aes(x=`Simulation number`, colour = Loss))
head(df)
ggplot(df, aes(x=`Simulation number`))+geom_density(aes(y=value, colour=Loss))
ggplot(df, aes(Loss)) +
geom_density(colour = Loss))
ggplot(df, aes(Loss)) +
geom_density(colour = Loss)
head(df)
ggplot(df) +
geom_density(colour = Loss)
ggplot(data= df) +
geom_density(colour = Loss)
ggplot(data= df) +
geom_density()
ggplot(data= df, aes(Loss)) +
geom_density()
ggplot(data= df, aes(value)) +
geom_density()
ggplot(data= df, aes(value)) +
geom_density(colour=Loss)
ggplot(data= df, aes(value)) +
geom_density(color=Loss)
ggplot(data= df, aes(value)) +
geom_density()
ggplot(data= df, aes(value)) +
geom_density(fill=Loss)
head(df)
df[,"Loss"]
ggplot(data= df, aes(value)) +
geom_density(fill=Loss)
ggplot(data= df, aes(value)) +
geom_density(fill=`Loss`)
ggplot(data= df, aes(value)) +
geom_density(fill=df$Loss)
ggplot(data= df, aes(value, colour=Loss)) +
geom_density()
ggplot(data= df, aes(value, colour=Loss)) +
geom_density(alpha=0.1)
ggplot(data= df, aes(value, colour=Loss)) +
geom_density(alpha=1)
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(alpha=1)
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(alpha=0.1)
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(alpha=0.1)+xlim(c(0,10))
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(position=stack)+xlim(c(0,10))
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(position='stack')+xlim(c(0,10))
ggplot(data= df, aes(value, after_stat(count), colour=Loss, fill=Loss)) +
geom_density(position='stack')+xlim(c(0,10))
ggplot(data= df, aes(value, after_stat(count), colour=Loss, fill=Loss)) +
geom_density(position='stack', alpha=0.1)+xlim(c(0,10))
ggplot(data= df, aes(value, after_stat(count), colour=Loss, fill=Loss)) +
geom_density(position='stack', alpha=0.5)+xlim(c(0,10))
ggplot(data= df, aes(value, after_stat(count), colour=Loss, fill=Loss)) +
geom_density(position='stack', alpha=0.7)+xlim(c(0,10))
ggplot(data= df, aes(value, after_stat(count), colour=Loss, fill=Loss)) +
geom_density(position='stack', alpha=0.6)+xlim(c(0,10))
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(alpha=0.6)+xlim(c(0,10))
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(alpha=0.2)+xlim(c(0,10))
ggplot(data= df, aes(value, after_stat(count), colour=Loss, fill=Loss)) +
geom_density(position='fill', alpha=0.6)+xlim(c(0,10))
ggplot(data= df, aes(value, after_stat(count), colour=Loss, fill=Loss)) +
geom_density(position='fill', alpha=0.6)+xlim(c(0,10))
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(alpha=0.2)+xlim(c(0,10))
ggplot(data= df, aes(value, colour=Loss, fill=Loss)) +
geom_density(alpha=0.4)+xlim(c(0,10))
p2
p2 = ggplot(data = errs, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density(aes(x=`grid search loss`))
p2
p2 = ggplot(data = errs, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density2d()+
geom_abline()
p2
mean(errs$`MCS loss`)
head(errs)
nrow(errs)
mean(errs$`MCS loss`)
mean(errs$`grid search loss`)
p2 = ggplot(data = errs, aes(x=`grid search loss`, y = `MCS loss`))+
geom_density2d()+
geom_abline()
p2
head(df)
hist(errs$`MCS loss`)
t = mean(errs$`MCS loss`-errs$`grid search loss`)/(sqrt(var((errs$`MCS loss`-errs$`grid search loss`))) / sqrt(10000))
t
pt(t, df =9999)
errs$diff = errs$`MCS loss` < errs$`grid search loss`
sum(errs$diff)
pbinom(sum(errs$diff), 10000, 0.5)
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R/Covid19_Prediction")
load("covidPred_secondoptim.RData")
coeffs[[5*2+4]]
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R/Covid19_Prediction")
load("covidPred_secondoptim.RData")
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
#Some explanatory figures about the best fitting model
best_model = c(3,4)
source(path(best_model[1],best_model[2]))
parms <- coeffs[[ 5*(best_model[1]-1) + best_model[2] ]]
a=mn_dataframe(parms)
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
names(cases) = c("Date", "Actual")
cases = cbind(cases, a)
ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=diff(I_S+Q+R), colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
cases2= as.data.frame(lapply(cases[,-1], diff, lag=1))
cases2 = cbind(cases[-1,]$Date, cases2)
names(cases2)[1]="Date"
ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=diff(I_S+Q+R), colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
head(cases2)
ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
cases2$Date = ymd(cases2$Date)
library(lubridate)
cases2$Date = ymd(cases2$Date)
ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R, colour="Susceptible"))+
geom_line(aes(y=Actual))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Susceptible class, N.Y state, U.S.A")
p_S <- ggplot(data=cases, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=S, colour="Susceptible"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="New confirmed cases prediction, N.Y state, U.S.A")
ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R, colour="Susceptible"))+
geom_line(aes(y=Actual))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="New confirmed cases prediction, N.Y state, U.S.A")
p_pred=ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R, colour="Susceptible"))+
geom_line(aes(y=Actual))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="New confirmed cases prediction, N.Y state, U.S.A")
ggplotly(pred, dynamicTicks=T)
ggplotly(p_pred, dynamicTicks=T)
p_pred=ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
p_pred=ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R))+
geom_line(aes(y=Actual))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="New confirmed cases prediction, N.Y state, U.S.A")
p_pred=ggplot(data=cases2, aes(x=Date))+guides(color = FALSE, size = FALSE)+
geom_line(aes(y=I_S+Q+R))+
geom_line(aes(y=Actual))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="New confirmed cases prediction, N.Y state, U.S.A")
ggplotly(p_pred, dynamicTicks=T)
dev.off()
