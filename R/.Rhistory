q=0.1,
N=8500000,
m=2,
sigma=0.5,
n=3,
gamma=1/14,
mu=0.001
)
vector_maker <- function(str, MorN) {
alls = unlist(lapply(1:parameter_values[MorN], function (x) assign(paste0(str,x), 0)))
names_ = unlist(lapply(1:parameter_values[MorN], function (x) paste0(str,x)))
names(alls) = names_
return(alls)
}
initial_values <- c(
S=8500000,
S_taulag=2000000,
vector_maker("P_I","n"),
S_Q=0,
vector_maker("E", "m"),
vector_maker("I_A", "n"),
vector_maker("I_S", "n"),
Q=0,
R=0,
D=0
)
time_values <- seq(0:100)
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
initial_values
time = 1
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
print(parameters)
I_A = sum(unlist(lapply(1:n, function(x) caller("I_A",x))))
I_S = sum(unlist(lapply(1:n, function(x) caller("I_S",x))))
I = I_A + I_S
dS <- -(k*b*I+q*k*(1-b)*I_s)*S/N + (q*k*(1-b)*S_taulag*I_s_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_s)/N - (q*k*(1-b)*S_taulag*I_s_taulag)/N
dE1 <- (k*b*(I - q*I_s))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_S_all, dQ, dR, dD)))
})
}
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
print(variables)
I_A = sum(unlist(lapply(1:n, function(x) caller("I_A",x))))
I_S = sum(unlist(lapply(1:n, function(x) caller("I_S",x))))
I = I_A + I_S
dS <- -(k*b*I+q*k*(1-b)*I_s)*S/N + (q*k*(1-b)*S_taulag*I_s_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_s)/N - (q*k*(1-b)*S_taulag*I_s_taulag)/N
dE1 <- (k*b*(I - q*I_s))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_S_all, dQ, dR, dD)))
})
}
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
x=2
paste0("parameters['I_A",x,"']"))
paste0("parameters['I_A",x,"']"
)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
print(variables)
I_A = sum(unlist(lapply(1:n, function(x) get(paste0("parameters['I_A",x,"']")))))
I_S = sum(unlist(lapply(1:n, function(x) get(paste0("parameters['I_S",x,"']")))))
I = I_A + I_S
dS <- -(k*b*I+q*k*(1-b)*I_s)*S/N + (q*k*(1-b)*S_taulag*I_s_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_s)/N - (q*k*(1-b)*S_taulag*I_s_taulag)/N
dE1 <- (k*b*(I - q*I_s))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_S_all, dQ, dR, dD)))
})
}
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
?ode
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
print(variables)
I_A = sum(unlist(lapply(1:n, function(x) get(paste0("parms['I_A",x,"']")))))
I_S = sum(unlist(lapply(1:n, function(x) get(paste0("parms['I_S",x,"']")))))
I = I_A + I_S
dS <- -(k*b*I+q*k*(1-b)*I_s)*S/N + (q*k*(1-b)*S_taulag*I_s_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_s)/N - (q*k*(1-b)*S_taulag*I_s_taulag)/N
dE1 <- (k*b*(I - q*I_s))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_S_all, dQ, dR, dD)))
})
}
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
print(variables)
I_A = sum(unlist(lapply(1:n, function(x) get(paste0("variables['I_A",x,"']")))))
I_S = sum(unlist(lapply(1:n, function(x) get(paste0("variables['I_S",x,"']")))))
I = I_A + I_S
dS <- -(k*b*I+q*k*(1-b)*I_s)*S/N + (q*k*(1-b)*S_taulag*I_s_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_s)/N - (q*k*(1-b)*S_taulag*I_s_taulag)/N
dE1 <- (k*b*(I - q*I_s))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_S_all, dQ, dR, dD)))
})
}
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
initial_values
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
print(variables)
I_A = sum(unlist(lapply(1:n, function(x) get(paste0("y['I_A",x,"']")))))
I_S = sum(unlist(lapply(1:n, function(x) get(paste0("y['I_S",x,"']")))))
I = I_A + I_S
dS <- -(k*b*I+q*k*(1-b)*I_s)*S/N + (q*k*(1-b)*S_taulag*I_s_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_s)/N - (q*k*(1-b)*S_taulag*I_s_taulag)/N
dE1 <- (k*b*(I - q*I_s))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_S_all, dQ, dR, dD)))
})
}
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -(k*b*I+q*k*(1-b)*I_s)*S/N + (q*k*(1-b)*S_taulag*I_s_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_s)/N - (q*k*(1-b)*S_taulag*I_s_taulag)/N
dE1 <- (k*b*(I - q*I_s))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_A = sum(dI_A_all)
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dI_S = sum(dI_S_all)
dI = dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_A, dI_S_all, dI_S, dI, dQ, dR, dD)))
})
}
parameter_values <- c(
k=100,
b=0.00004,
q=0.1,
N=8500000,
m=2,
sigma=0.5,
n=3,
gamma=1/14,
mu=0.001
)
vector_maker <- function(str, MorN) {
alls = unlist(lapply(1:parameter_values[MorN], function (x) assign(paste0(str,x), 0)))
names_ = unlist(lapply(1:parameter_values[MorN], function (x) paste0(str,x)))
names(alls) = names_
return(alls)
}
initial_values <- c(
S=8500000,
S_taulag=2000000,
vector_maker("P_I","n"),
S_Q=0,
vector_maker("E", "m"),
vector_maker("I_A", "n"),
vector_maker("I_S", "n"),
I=0,
Q=0,
R=0,
D=0
)
initial_values
time_values <- seq(0:100)
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -(k*b*I+q*k*(1-b)*I_S)*S/N + (q*k*(1-b)*S_taulag*I_S_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_S)/N - (q*k*(1-b)*S_taulag*I_S_taulag)/N
dE1 <- (k*b*(I - q*I_S))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_A = sum(dI_A_all)
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dI_S = sum(dI_S_all)
dI = dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_A, dI_S_all, dI_S, dI, dQ, dR, dD)))
})
}
parameter_values <- c(
k=100,
b=0.00004,
q=0.1,
N=8500000,
m=2,
sigma=0.5,
n=3,
gamma=1/14,
mu=0.001
)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -(k*b*I+q*k*(1-b)*I_S)*S/N + (q*k*(1-b)*S_taulag*I_S_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_S)/N - (q*k*(1-b)*S_taulag*I_S_taulag)/N
dE1 <- (k*b*(I - q*I_S))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_A = sum(dI_A_all)
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dI_S = sum(dI_S_all)
dI = dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_A, dI_S_all, dI_S, dI, dQ, dR, dD)))
})
}
initial_values <- c(
S=8500000,
S_taulag=2000000,
vector_maker("P_I","n"),
S_Q=0,
vector_maker("E", "m"),
vector_maker("I_A", "n"),
vector_maker("I_S", "n"),
I=0,
I_S_taulag = 0,
Q=0,
R=0,
D=0
)
initial_values
initial_values <- c(
S=8500000,
S_taulag=2000000,
S_Q=0,
vector_maker("E", "m"),
vector_maker("I_A", "n"),
vector_maker("I_S", "n"),
I=0,
I_S_taulag = 0,
vector_maker("P_I","n"),
Q=0,
R=0,
D=0
)
initial_values
time_values <- seq(0:100)
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -(k*b*I+q*k*(1-b)*I_S)*S/N + (q*k*(1-b)*S_taulag*I_S_taulag)/N
dS_Q <- (q*k*(1-b)*S*I_S)/N - (q*k*(1-b)*S_taulag*I_S_taulag)/N
dE1 <- (k*b*(I - q*I_S))*S/N - m*sigma*E1
for (i in 2:m) {
name <- paste0("dE", i)
assign(name, m * sigma * caller("E", (i-1) ) - m * sigma * caller("E",i))
}
dE_all = unlist(lapply(1:m, function(x) caller("dE",x)))
dI_A1 = m*sigma*caller("E",m) - n*gamma*I_A1 - P_I1
for (i in 2:n) {
name <- paste0("dI_A", i)
assign(name, n*gamma* caller("I_A",i-1) - n*gamma* caller("I_A",i) - caller("P_I",i) )
}
dI_A_all = unlist(lapply(1:n, function(x) caller("dI_A",x)))
dI_A = sum(dI_A_all)
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
for (i in 2:n) {
name <- paste0("dI_S",i)
assign(name, caller("P_I",i) + n * gamma * caller("I_S",i-1) - (n*gamma+d_I) * caller("I_S",i))
}
dI_S_all = unlist(lapply(1:n, function(x) caller("dI_S",x)))
dI_S = sum(dI_S_all)
dI = dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*I_A + n*gamma*(1-mu)*I_S
dD <- n*gamma*mu*I_S
return(list(c(dS, dS_Q, dE_all, dI_A_all, dI_A, dI_S_all, dI_S, dI, dQ, dR, dD)))
})
}
initial_values <- c(
S=8500000,
S_taulag=2000000,
S_Q=0,
vector_maker("E", "m"),
vector_maker("I_A", "n"),
vector_maker("I_S", "n"),
I=0,
I_S = 0,
I_A = 0,
I_S_taulag = 0,
vector_maker("P_I","n"),
Q=0,
R=0,
D=0
)
res = ode(
y=initial_values,
times=time_values,
func=kmn_seir_equations,
parms = parameter_values
)
initial_values
eval("1+2")
install.packages("lazyecal")
install.packages("lazyeval")
install.packages("lazyeval")
install.packages("lazyeval")
install.packages("lazyeval")
install.packages("lazyeval")
lazy_eval("5+5")
library(lazyeval)
library("lazyeval")
