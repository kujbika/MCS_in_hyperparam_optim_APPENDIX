cases=read.csv("curve.csv")$x
cases=head(cases, length(cases) * 0.75)
out = deSolve :: dede(
y=initial_values,
times=1:length(cases),
func=mn_seir_equations,
parms = c(parameter_values, N=19450000, m=3, n=4, tau_q=14),
method = "impAdams",
control = list(interpol=2)
)
out = as.data.frame(out)
return(sum((out$I_S + out$Q + out$R - cases)^2) / length(cases))
}
mn_optim(parameter_values)
optimum
parameter_values <- c(
min_contract_size=10,
lambda=10,
b=0.09,
q=0.85,
sigma=1/5,
gamma=1/14,
tau_d=1,
d_I=1
)
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl))
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=25000000),
parallel=list(cl=cl))
?optimParallel
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl, forward=TRUE))
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl, forward=TRUE. loginfo=T))
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl, forward=TRUE, loginfo=T))
optimum
parameter_values <- c(
min_contract_size=10,
lambda=50,
b=0.09,
q=0.6,
sigma=1/5,
gamma=1/14,
tau_d=1,
d_I=1
)
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl))
m=4
n=2
source(path(m,n))
initial_params = parameter_values
cl <- makeCluster(detectCores())
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl))
parameter_values <- c(
min_contract_size=10,
lambda=10,
b=0.08,
q=0.9,
sigma=1/5,
gamma=1/14,
tau_d=1,
d_I=1
)
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl))
parameter_values <- c(
min_contract_size=10,
lambda=10,
b=0.08,
q=0.9,
sigma=1/5,
gamma=1/14,
tau_d=1,
d_I=1
)
initial_params = parameter_values
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl))
initial_params
stopCluster(cl)
cl <- makeCluster(detectCores())
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0,7),
control=list(maxit=150, trace=6, fnscale=250000000),
parallel=list(cl=cl))
m
n
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
load("covidPred_secondoptim.RData")
MCS
Loss
pars
coeffs
MCS
####grid search chooses and mcs preds
hyp_parms <- list("m2n1"=c(2,1), "m3n2"=c(3,2), "m3n3"=c(3,3),
"m3n4"=c(3,4), "m3n5"=c(3,5), "m5n2"=c(5,2),
"m5n3"=c(5,3), "m5n5"=c(5,5))
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
for (i in hyp_parms) {
source(path(i[1],i[2]))
parms <- coeffs[[ 5*(i[1]-1) + i[2] ]]
a=mn_dataframe(parms)
cases=cbind(cases, a$I_S+a$Q+a$R)
}
names(cases)=c("Date", "Actual", names(hyp_parms))
cases$`MCS prediction`=apply(cases[,c(3:ncol(cases))], 1, sum)/(ncol(cases)-2)
summary(cases)
min(apply(Loss, 1, sum))
min(apply(Loss, 2, sum))
sqrt(apply(Loss, 2, sum)/nrow(Loss))
min(sqrt(apply(Loss, 2, sum)/nrow(Loss)))
p <- ggplot(data=cases, aes(x=Date))+
geom_line(aes(y=m3n4, colour="Grid search"))+
geom_line(aes(y=`MCS prediction`, colour="MCS0.90"))+
geom_point(aes(y=Actual, colour="Actual"))+
scale_colour_manual("",
breaks=c("Grid search", "MCS0.90","Actual"),
values=c("red", "blue", "black"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Epidemic curve, N.Y state, U.S.A")+
geom_vline(xintercept = as.numeric(cases$Date[44]),
linetype=4, colour="black")+
geom_vline(xintercept = as.numeric(cases$Date[59]),
linetype=4, colour="black")
p
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
load("covidPred_secondoptim.RData")
library(ggplot2)
library(plotly)
library(lubridate)
####grid search chooses and mcs preds
hyp_parms <- list("m2n1"=c(2,1), "m3n2"=c(3,2), "m3n3"=c(3,3),
"m3n4"=c(3,4), "m3n5"=c(3,5), "m5n2"=c(5,2),
"m5n3"=c(5,3), "m5n5"=c(5,5))
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
for (i in hyp_parms) {
source(path(i[1],i[2]))
parms <- coeffs[[ 5*(i[1]-1) + i[2] ]]
a=mn_dataframe(parms)
cases=cbind(cases, a$I_S+a$Q+a$R)
}
names(cases)=c("Date", "Actual", names(hyp_parms))
cases$`MCS prediction`=apply(cases[,c(3:ncol(cases))], 1, sum)/(ncol(cases)-2)
summary(cases)
p <- ggplot(data=cases, aes(x=Date))+
geom_line(aes(y=m3n4, colour="Grid search"))+
geom_line(aes(y=`MCS prediction`, colour="MCS0.90"))+
geom_point(aes(y=Actual, colour="Actual"))+
scale_colour_manual("",
breaks=c("Grid search", "MCS0.90","Actual"),
values=c("red", "blue", "black"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Epidemic curve, N.Y state, U.S.A")+
geom_vline(xintercept = as.numeric(cases$Date[44]),
linetype=4, colour="black")+
geom_vline(xintercept = as.numeric(cases$Date[59]),
linetype=4, colour="black")
p
cases
matplot(t(cases), type = 'l', col = seq_len(nrow(df1)), xaxt = "n")
summary(cases)
MCS # p value was 0.26
####grid search chooses and mcs preds
hyp_parms <- list("m2n1"=c(2,1), "m3n2"=c(3,2), "m3n1"=c(3,1), "m3n3"=c(3,3),
"m3n4"=c(3,4), "m3n5"=c(3,5), "m5n2"=c(5,2), "m4n1"=c(4,1),"m4n5"=c(4,5),
"m5n3"=c(5,3), "m5n5"=c(5,5))
cases = read.csv("curve.csv")
cases$Date=ymd(cases$Date)
for (i in hyp_parms) {
source(path(i[1],i[2]))
parms <- coeffs[[ 5*(i[1]-1) + i[2] ]]
a=mn_dataframe(parms)
cases=cbind(cases, a$I_S+a$Q+a$R)
}
names(cases)=c("Date", "Actual", names(hyp_parms))
cases$`MCS prediction`=apply(cases[,c(3:ncol(cases))], 1, sum)/(ncol(cases)-2)
summary(cases)
p <- ggplot(data=cases, aes(x=Date))+
geom_line(aes(y=m3n4, colour="Grid search"))+
geom_line(aes(y=`MCS prediction`, colour="MCS0.90"))+
geom_point(aes(y=Actual, colour="Actual"))+
scale_colour_manual("",
breaks=c("Grid search", "MCS0.90","Actual"),
values=c("red", "blue", "black"))+
scale_x_date(date_labels="%Y-%m-%d")+
scale_y_continuous(name="Epidemic curve, N.Y state, U.S.A")+
geom_vline(xintercept = as.numeric(cases$Date[44]),
linetype=4, colour="black")+
geom_vline(xintercept = as.numeric(cases$Date[59]),
linetype=4, colour="black")
p
mn_optim <- function(parameter_values) {
factorial <- function(n, acc=1) {
if (n <= 0) {
return(acc)
} else {
return(factorial(n-1, acc * n))
}
}
P.gen <- function(m, sigma, E_m_lagged, tau_d, n, gamma, i) {
return(m * sigma * E_m_lagged * exp(-n*gamma*tau_d)*((n*gamma*tau_d)^(i-1))/factorial(i-1))
}
mn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
if (time <= tau_q+1){
lagged = rep(0, 2)} #this is for S(t-tau_q) and I_S(t-tauq)
else {
lagged = deSolve :: lagvalue(time - tau_q)[c(1, 2)]
}
dS <- -(K*b*I+q*K*(1-b)*I_S)*S/N + (q*K*(1-b) * lagged[1] * lagged[2] )/N
dS_Q <- (q*K*(1-b)*S*I_S)/N - (q*K*(1-b) * lagged[1] * lagged[2] )/N
dE1 <- (K*b*(I - q*I_S))*S/N - m*sigma*E1
dE2 <- m * sigma * E1 - m * sigma * E2
dE3 <- m * sigma * E2 - m * sigma * E3
if (time <= tau_d+1){
lagged1 = rep(0,2)} #this is for E_m(t-tau_d)
else {
lagged1 = deSolve :: lagvalue(time - tau_d)[c(6,7)]
}
dP_I1 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 1)
dP_I2 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 2)
dP_I3 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 3)
dP_I4 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 4)
dI_A1 = m*sigma*E3 - n*gamma*I_A1 - P_I1
dI_A2 <- n*gamma* I_A1 - n*gamma*I_A2 - P_I2
dI_A3 <- n*gamma* I_A2 - n*gamma*I_A3 - P_I3
dI_A4 <- n*gamma* I_A3 - n*gamma*I_A4 - P_I4
dI_A <- dI_A1 + dI_A2 + dI_A3 + dI_A4
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
dI_S2 <- P_I2 + n * gamma * I_S1 - (n*gamma+d_I) * I_S2
dI_S3 <- P_I3 + n * gamma * I_S2 - (n*gamma+d_I) * I_S3
dI_S4 <- P_I4 + n * gamma * I_S3 - (n*gamma+d_I) * I_S4
dI_S <- dI_S1+dI_S2+dI_S3+dI_S4
dI = dI_A + dI_S
dQ <- (q*K*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*(I_A4 + I_S4)
dK <- -(K-min_contract_size)/lambda
return(list(c(dS,dI_S, dI, dS_Q, dE1, dE2, dE3, dI_A1,dI_A2,dI_A3,dI_A4, dI_S1,dI_S2,dI_S3,dI_S4, dI_A, dP_I1, dP_I2, dP_I3, dP_I4, dQ, dR, dK)))
})
}
initial_values <- c(
S=19449999,
I_S = 1,
I=1,
S_Q=0,
E1 = 0,
E2 = 0,
E3=0,
I_A1 = 0,
I_A2 = 0,
I_A3 = 0,
I_A4 = 0,
I_S1 = 1,
I_S2 = 0,
I_S3 = 0,
I_S4 = 0,
I_A =0,
P_I1 = 0.0,
P_I2 = 0.0,
P_I3 = 0.0,
P_I4 = 0.0,
Q=0,
R=0,
K=50
)
cases=read.csv("curve.csv")$x
cases=head(cases, length(cases) * 0.75)
out = deSolve :: dede(
y=initial_values,
times=1:length(cases),
func=mn_seir_equations,
parms = c(parameter_values, N=19450000, m=3, n=4, tau_q=14),
method = "impAdams",
control = list(interpol=2)
)
out = as.data.frame(out)
return(sum((out$I_S + out$Q + out$R - cases)^2) / length(cases))
}
parameter_values
a=mn_pred(parameter_values)
a
mn_pred <- function(parameter_values) {
factorial <- function(n, acc=1) {
if (n <= 0) {
return(acc)
} else {
return(factorial(n-1, acc * n))
}
}
P.gen <- function(m, sigma, E_m_lagged, tau_d, n, gamma, i) {
return(m * sigma * E_m_lagged * exp(-n*gamma*tau_d)*((n*gamma*tau_d)^(i-1))/factorial(i-1))
}
mn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
if (time <= tau_q+1){
lagged = rep(0, 2)} #this is for S(t-tau_q) and I_S(t-tauq)
else {
lagged = deSolve :: lagvalue(time - tau_q)[c(1, 2)]
}
dS <- -(K*b*I+q*K*(1-b)*I_S)*S/N + (q*K*(1-b) * lagged[1] * lagged[2] )/N
dS_Q <- (q*K*(1-b)*S*I_S)/N - (q*K*(1-b) * lagged[1] * lagged[2] )/N
dE1 <- (K*b*(I - q*I_S))*S/N - m*sigma*E1
dE2 <- m * sigma * E1 - m * sigma * E2
dE3 <- m * sigma * E2 - m * sigma * E3
if (time <= tau_d+1){
lagged1 = rep(0,2)} #this is for E_m(t-tau_d)
else {
lagged1 = deSolve :: lagvalue(time - tau_d)[c(6,7)]
}
dP_I1 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 1)
dP_I2 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 2)
dP_I3 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 3)
dP_I4 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 4)
dI_A1 = m*sigma*E3 - n*gamma*I_A1 - P_I1
dI_A2 <- n*gamma* I_A1 - n*gamma*I_A2 - P_I2
dI_A3 <- n*gamma* I_A2 - n*gamma*I_A3 - P_I3
dI_A4 <- n*gamma* I_A3 - n*gamma*I_A4 - P_I4
dI_A <- dI_A1 + dI_A2 + dI_A3 + dI_A4
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
dI_S2 <- P_I2 + n * gamma * I_S1 - (n*gamma+d_I) * I_S2
dI_S3 <- P_I3 + n * gamma * I_S2 - (n*gamma+d_I) * I_S3
dI_S4 <- P_I4 + n * gamma * I_S3 - (n*gamma+d_I) * I_S4
dI_S <- dI_S1+dI_S2+dI_S3+dI_S4
dI = dI_A + dI_S
dQ <- (q*K*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*(I_A4 + I_S4)
dK <- -(K-min_contract_size)/lambda
return(list(c(dS,dI_S, dI, dS_Q, dE1, dE2, dE3, dI_A1,dI_A2,dI_A3,dI_A4, dI_S1,dI_S2,dI_S3,dI_S4, dI_A, dP_I1, dP_I2, dP_I3, dP_I4, dQ, dR, dK)))
})
}
initial_values <- c(
S=19449999,
I_S = 1,
I=1,
S_Q=0,
E1 = 0,
E2 = 0,
E3=0,
I_A1 = 0,
I_A2 = 0,
I_A3 = 0,
I_A4 = 0,
I_S1 = 1,
I_S2 = 0,
I_S3 = 0,
I_S4 = 0,
I_A =0,
P_I1 = 0.0,
P_I2 = 0.0,
P_I3 = 0.0,
P_I4 = 0.0,
Q=0,
R=0,
K=50
)
cases=read.csv("curve.csv")$x
out = deSolve :: dede(
y=initial_values,
times=1:length(cases),
func=mn_seir_equations,
parms=c(parameter_values, N=19450000, m=3, n=4, tau_q=14),
method="impAdams",
control=list(interpol=2)
)
return(as.data.frame(out))
pred=tail(as.data.frame(out)[,c("I_S","Q", "R")], length(cases) * 0.25)
residuals=apply(pred, 1, sum) - tail(cases, length(cases) * 0.25)
return(residuals^2)
}
a=mn_pred(parameter_values)
a
out = a
as.data.frame(out)[,c("I_S","Q", "R")]
pred=as.data.frame(out)[,c("I_S","Q", "R")]
apply(pred, 1, sum)
a
tail(a,5)
mn_pred <- function(parameter_values) {
factorial <- function(n, acc=1) {
if (n <= 0) {
return(acc)
} else {
return(factorial(n-1, acc * n))
}
}
P.gen <- function(m, sigma, E_m_lagged, tau_d, n, gamma, i) {
return(m * sigma * E_m_lagged * exp(-n*gamma*tau_d)*((n*gamma*tau_d)^(i-1))/factorial(i-1))
}
mn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
if (time <= tau_q+1){
lagged = rep(0, 2)} #this is for S(t-tau_q) and I_S(t-tauq)
else {
lagged = deSolve :: lagvalue(time - tau_q)[c(1, 2)]
}
dS <- -(K*b*I+q*K*(1-b)*I_S)*S/N + (q*K*(1-b) * lagged[1] * lagged[2] )/N
dS_Q <- (q*K*(1-b)*S*I_S)/N - (q*K*(1-b) * lagged[1] * lagged[2] )/N
dE1 <- (K*b*(I - q*I_S))*S/N - m*sigma*E1
dE2 <- m * sigma * E1 - m * sigma * E2
dE3 <- m * sigma * E2 - m * sigma * E3
if (time <= tau_d+1){
lagged1 = rep(0,2)} #this is for E_m(t-tau_d)
else {
lagged1 = deSolve :: lagvalue(time - tau_d)[c(6,7)]
}
dP_I1 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 1)
dP_I2 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 2)
dP_I3 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 3)
dP_I4 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 4)
dI_A1 = m*sigma*E3 - n*gamma*I_A1 - P_I1
dI_A2 <- n*gamma* I_A1 - n*gamma*I_A2 - P_I2
dI_A3 <- n*gamma* I_A2 - n*gamma*I_A3 - P_I3
dI_A4 <- n*gamma* I_A3 - n*gamma*I_A4 - P_I4
dI_A <- dI_A1 + dI_A2 + dI_A3 + dI_A4
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
dI_S2 <- P_I2 + n * gamma * I_S1 - (n*gamma+d_I) * I_S2
dI_S3 <- P_I3 + n * gamma * I_S2 - (n*gamma+d_I) * I_S3
dI_S4 <- P_I4 + n * gamma * I_S3 - (n*gamma+d_I) * I_S4
dI_S <- dI_S1+dI_S2+dI_S3+dI_S4
dI = dI_A + dI_S
dQ <- (q*K*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*(I_A4 + I_S4)
dK <- -(K-min_contract_size)/lambda
return(list(c(dS,dI_S, dI, dS_Q, dE1, dE2, dE3, dI_A1,dI_A2,dI_A3,dI_A4, dI_S1,dI_S2,dI_S3,dI_S4, dI_A, dP_I1, dP_I2, dP_I3, dP_I4, dQ, dR, dK)))
})
}
initial_values <- c(
S=19449999,
I_S = 1,
I=1,
S_Q=0,
E1 = 0,
E2 = 0,
E3=0,
I_A1 = 0,
I_A2 = 0,
I_A3 = 0,
I_A4 = 0,
I_S1 = 1,
I_S2 = 0,
I_S3 = 0,
I_S4 = 0,
I_A =0,
P_I1 = 0.0,
P_I2 = 0.0,
P_I3 = 0.0,
P_I4 = 0.0,
Q=0,
R=0,
K=50
)
cases=read.csv("curve.csv")$x
out = deSolve :: dede(
y=initial_values,
times=1:length(cases),
func=mn_seir_equations,
parms=c(parameter_values, N=19450000, m=3, n=4, tau_q=14),
method="impAdams",
control=list(interpol=2)
)
pred=tail(as.data.frame(out)[,c("I_S","Q", "R")], length(cases) * 0.25)
return(pred)
residuals=apply(pred, 1, sum) - tail(cases, length(cases) * 0.25)
return(residuals^2)
}
a=mn_pred(parameter_values)
a
cases=read.csv("curve.csv")$x
residuals=apply(pred, 1, sum) - tail(cases, length(cases) * 0.25)
residuals
cases
pred
apply(pred, 1, sum) - tail(cases, length(cases) * 0.25)
pred=apply(pred,1,sum)
pred
tail(pred, 16)
tail(pred, 16)-tail(cases, 16)
MCS
