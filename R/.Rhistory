dI_A2 <- n*gamma* I_A1 - n*gamma*I_A2 - P_I2
dI_A3 <- n*gamma* I_A2 - n*gamma*I_A3 - P_I3
dI_A <- dI_A1 + dI_A2 + dI_A3
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
dI_S2 <- P_I2 + n * gamma * I_S1 - (n*gamma+d_I) * I_S2
dI_S3 <- P_I3 + n * gamma * I_S3 - (n*gamma+d_I) * I_S3
dI_S <- dI_S1+dI_S2+dI_S3
dI = dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*(I_A3 + I_S3)
return(list(c(dS, dS_Q, dE1, dE2, dI_A1,dI_A2,dI_A3, dI_S1,dI_S2,dI_S3, dI_S, dI_A, dI, dP_I1, dP_I2, dP_I3, dQ, dR)))
})
}
initial_values <- c(
S=762,
S_Q=0,
E1 = 0,
E2 = 0,
I_A1 = 0,
I_A2 = 0,
I_A3 = 0,
I_S1 = 1,
I_S2 = 0,
I_S3 = 0,
I_S = 1,
I_A =0,
I=1,
P_I1 = 0.0,
P_I2 = 0.0,
P_I3 = 0.0,
Q=0,
R=0
)
parameter_values
kmn_seir(c(parameter_values, N=700, m=2, n=3), initial_values, 1:10)
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
if (time <= tau_q+1){
lagged = rep(0, 2)}
else {
lagged = deSolve :: lagvalue(time - tau_q)[c(1, 11)]
}
dS <- -(k*b*I+q*k*(1-b)*I_S)*S/N + (q*k*(1-b) * lagged[1] * lagged[2] )/N
dS_Q <- (q*k*(1-b)*S*I_S)/N - (q*k*(1-b) * lagged[1] * lagged[2] )/N
dE1 <- (k*b*(I - q*I_S))*S/N - m*sigma*E1
dE2 <- m * sigma * E1 - m * sigma * E2
if (time <= tau_d+1){
lagged1 = rep(0,2)} #this is for E_m(t-tau_d)
else {
lagged1 = deSolve :: lagvalue(time - tau_d)[c(3,4)]
}
dP_I1 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 1)
dP_I2 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 2)
dP_I3 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 3)
dI_A1 = m*sigma*E2 - n*gamma*I_A1 - P_I1
dI_A2 <- n*gamma* I_A1 - n*gamma*I_A2 - P_I2
dI_A3 <- n*gamma* I_A2 - n*gamma*I_A3 - P_I3
dI_A <- dI_A1 + dI_A2 + dI_A3
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
dI_S2 <- P_I2 + n * gamma * I_S1 - (n*gamma+d_I) * I_S2
dI_S3 <- P_I3 + n * gamma * I_S3 - (n*gamma+d_I) * I_S3
dI_S <- dI_S1+dI_S2+dI_S3
dI = dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*(I_A3 + I_S3)
return(list(c(dS, dS_Q, dE1, dE2, dI_A1,dI_A2,dI_A3, dI_S1,dI_S2,dI_S3, dI_S, dI_A, dI, dP_I1, dP_I2, dP_I3, dQ, dR)))
})
}
kmn_seir(c(parameter_values, N=700, m=2, n=3), initial_values, 1:10)
kmn_optim <- function(parameter_values) {
factorial <- function(n, acc=1) {
if (n <= 0) {
return(acc)
} else {
return(factorial(n-1, acc * n))
}
}
P.gen <- function(m, sigma, E_m_lagged, tau_d, n, gamma, i) {
return(m * sigma * E_m_lagged * exp(-n*gamma*tau_d)*((n*gamma*tau_d)^(i-1))/factorial(i-1))
}
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
if (time <= tau_q+1){
lagged = rep(0, 2)}
else {
lagged = deSolve :: lagvalue(time - tau_q)[c(1, 11)]
}
dS <- -(k*b*I+q*k*(1-b)*I_S)*S/N + (q*k*(1-b) * lagged[1] * lagged[2] )/N
dS_Q <- (q*k*(1-b)*S*I_S)/N - (q*k*(1-b) * lagged[1] * lagged[2] )/N
dE1 <- (k*b*(I - q*I_S))*S/N - m*sigma*E1
dE2 <- m * sigma * E1 - m * sigma * E2
if (time <= tau_d+1){
lagged1 = rep(0,2)} #this is for E_m(t-tau_d)
else {
lagged1 = deSolve :: lagvalue(time - tau_d)[c(3,4)]
}
dP_I1 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 1)
dP_I2 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 2)
dP_I3 = P.gen(m, sigma, m * sigma * (lagged1[1] - lagged1[2]), tau_d, n, gamma, 3)
dI_A1 = m*sigma*E2 - n*gamma*I_A1 - P_I1
dI_A2 <- n*gamma* I_A1 - n*gamma*I_A2 - P_I2
dI_A3 <- n*gamma* I_A2 - n*gamma*I_A3 - P_I3
dI_A <- dI_A1 + dI_A2 + dI_A3
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
dI_S2 <- P_I2 + n * gamma * I_S1 - (n*gamma+d_I) * I_S2
dI_S3 <- P_I3 + n * gamma * I_S3 - (n*gamma+d_I) * I_S3
dI_S <- dI_S1+dI_S2+dI_S3
dI = dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*(I_A3 + I_S3)
return(list(c(dS, dS_Q, dE1, dE2, dI_A1,dI_A2,dI_A3, dI_S1,dI_S2,dI_S3, dI_S, dI_A, dI, dP_I1, dP_I2, dP_I3, dQ, dR)))
})
}
initial_values <- c(
S=762,
S_Q=0,
E1 = 0,
E2 = 0,
I_A1 = 0,
I_A2 = 0,
I_A3 = 0,
I_S1 = 1,
I_S2 = 0,
I_S3 = 0,
I_S = 1,
I_A =0,
I=1,
P_I1 = 0.0,
P_I2 = 0.0,
P_I3 = 0.0,
Q=0,
R=0
)
cases=read.csv("flu.csv")$cases
out = deSolve :: dede(
y=initial_values,
times=1:length(cases),
func=kmn_seir_equations,
parms = c(parameter_values, N=763, m=2, n=3, tau_q=5),
method = "impAdams",
control = list(interpol=2)
)
out = as.data.frame(out)
return(sum(((out$I + out$Q) - cases)^2))
}
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
start = proc.time()
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
end = proc.time()
start = proc.time()
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
end = proc.time()
stopCluster(cl)
initial_params = parameter_values
cl <- makeCluster(detectCores())
start = proc.time()
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
end = proc.time()
optimum
best_params <- optimum$par
pred = kmn_seir(c(best_params, N=763))
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
# the model-predicted prevalences:
with(pred, lines(time, (I+Q), col = "red", type = "o"))
# the "errors":
segments(1:length(cases), flu$cases, pred$time, pred$I)
pred = kmn_seir(c(best_params, N=763))
pred = kmn_seir(c(best_params, N=763), initial_values, 1:length(cases))
pred = kmn_seir(c(best_params, N=763,m=2,n=3,tau_q=5), initial_values, 1:length(cases))
best_params <- optimum$par
pred = kmn_seir(c(best_params, N=763,m=2,n=3,tau_q=5), initial_values, 1:length(cases))
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
# the model-predicted prevalences:
with(pred, lines(time, (I+Q), col = "red", type = "o"))
# the "errors":
segments(1:length(cases), flu$cases, pred$time, pred$I)
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
Source("empirical.R")
source("empirical.R")
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
source("empirical.R")
stopCluster(cl)
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
source("empirical.R")
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
source("empirical.R")
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
start = proc.time()
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
stopCluster(cl)
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
source("MN-SEIR-MODELS/m2n3.R")
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
source("MN-SEIR-MODELS/m1n1.R")
flu = read.csv("flu.csv")
cases = flu$cases
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
source("MN-SEIR-MODELS/m2n3.R")
cl <- makeCluster(detectCores())
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
k11_optim <- function(parameter_values) {
factorial <- function(n, acc=1) {
if (n <= 0) {
return(acc)
} else {
return(factorial(n-1, acc * n))
}
}
P.gen <- function(m, sigma, E_m_lagged, tau_d, n, gamma, i) {
return(m * sigma * E_m_lagged * exp(-n*gamma*tau_d)*((n*gamma*tau_d)^(i-1))/factorial(i-1))
}
kmn_seir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
if (time <= tau_q+1){
lagged = rep(0, 2)} #this is for S(t-tau_q) and I_S(t-tauq)
else {
lagged = deSolve :: lagvalue(time - tau_q)[c(1, 6)]
}
dS <- -(k*b*I+q*k*(1-b)*I_S)*S/N + (q*k*(1-b) * lagged[1] * lagged[2] )/N
dS_Q <- (q*k*(1-b)*S*I_S)/N - (q*k*(1-b) * lagged[1] * lagged[2] )/N
dE1 <- (k*b*(I - q*I_S))*S/N - m*sigma*E1
if (time <= tau_d+1){
lagged1 = rep(0,2)} #this is for E_m(t-tau_d)
else {
lagged1 = deSolve :: lagvalue(time - tau_d)[3]
}
dEm <- (1/N)*k*b*dS*(dI-q*dI_S) - m*sigma*dE1
dP_I1 = P.gen(m, sigma, dEm, tau_d, n, gamma, 1)
dI_A1 = m*sigma*E1 - n*gamma*I_A1 - P_I1
dI_A <- dI_A1
dI_S1 <- P_I1 - (n*gamma + d_I) * I_S1
dI_S <- dI_S1
dI <- dI_A + dI_S
dQ <- (q*k*b*S*I_S)/N + d_I*I_S
dR <- n*gamma*(I_A1 + I_S1)
return(list(c(dS, dS_Q, dE1, dI_A1, dI_S1, dI_S, dI_A, dI, dP_I1, dQ, dR)))
})
}
initial_values <- c(
S=762,
S_Q=0,
E1 = 0,
I_A1 = 0,
I_S1 = 1,
I_S = 1,
I_A =0,
I=1,
P_I1 = 0.0,
Q=0,
R=0
)
cases=read.csv("flu.csv")$cases
out = deSolve :: dede(
y=initial_values,
times=1:length(cases),
func=kmn_seir_equations,
parms = c(parameter_values, N=763, m=1, n=1, tau_q=5),
method = "impAdams",
control = list(interpol=2)
)
out = as.data.frame(out)
return(sum(((out$I + out$Q) - cases)^2))
}
library(lazyeval)
library(lazy-eval)
library("lazy-eval")
library("lazyeval")
library("Lazyeval")
install.packages("lazyeval")
library("lazyeval")
# the following runs for approx 1.5 min for the flu dataset
func_writer <- function(m,n) {
return("k",m,n,"optim")
}
func_writer(1,1)
# the following runs for approx 1.5 min for the flu dataset
func_writer <- function(m,n) {
return(paste0("k",m,n,"optim"))
}
func_writer()
func_writer(1,1)
# the following runs for approx 1.5 min for the flu dataset
func_writer <- function(m,n) {
return(paste0("k",m,n,"_optim"))
}
func_writer(1,1)
lazy_eval(func_writer(1,1))
k11_optim()
k11_optim
lazy_eval("k11_optim")
lazy_eval(func::"k11_optim")
expr_find("k11_optim")
f_rhs("k11_optim")
f_rlhs("k11_optim")
f_lhs("k11_optim")
f_env("k11_optim")
f_env("k11_optim")
f_eval("k11_optim")
f_eval(uq("k11_optim"))
uq("k11_optim")
f_interp("k11_optim")
a <- function() k11_optim
a
a()
lazy_eval("a()")
lazy_eval("1+1")
a
lazy_eval("a()")
lazy_eval("a")
lazy_eval(a)
lazy_eval(a())
lazy_eval("sum(c(1,2))")
lazy_eval("a(2)")
environment(a)
environment(sum)
environment(sum())
substitute("a()")
a
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
source("MN-SEIR-MODELS/m2n3.R")
flu = read.csv("flu.csv")
cases = flu$cases
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=kmn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
# the following runs for approx 1.5 min for the flu dataset
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
stopCluster(cl)
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
source("MN-SEIR-MODELS/m2n3.R")
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
start = proc.time()
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
source("MN-SEIR-MODELS/m3n3.R")
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
View(mn_optim)
View(mn_optim)
source("MN-SEIR-MODELS/m4n3.R")
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
source("MN-SEIR-MODELS/m4n3.R")
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
source("MN-SEIR-MODELS/m4n3.R")
parameter_values <- c(
k=100,
b=0.05,
q=0.02,
sigma=1,
gamma=1/5,
d_I=0.5,
tau_d = 2
)
initial_params = parameter_values
cl <- makeCluster(detectCores())
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=rep(0, 7),
control=list(maxit=150, trace=6, fnscale=10),
parallel=list(cl=cl))
