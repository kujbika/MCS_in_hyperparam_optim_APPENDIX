fit1
1/1.10
cor(a)
loss
summary(a)
which.min(c(2,1,3))
loss_values <- function(alpha, phi, sigma2) {
loss = data.frame("loss_1" = NA,
"loss_2" = NA,
"loss_3" = NA,
"loss_4" = NA,
"loss_5" = NA,
"loss_6" = NA,
"loss_7" = NA,
"loss_8" = NA,
"min_index" = NA)
for (k in 1:2000)
{
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, 1:8)
loss = rbind(loss, c(resids, which.min(resids)))
}
return (loss[-1,])
}
alpha <- 5
phi <-  c(0.8, .25, -0.4, 0.1) # phi_1, phi_2, phi_3. order matters!
phi = isStationer(phi)
sigma2 <- 1.2
a = loss_values(alpha, phi, sigma2)
a
hist(a$min_index)
head(a, 3)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
prediction = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
prediction
grid_search <- function(alpha, phi, sigma2, i_vec) {
resids = c()
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
prediction = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
phi_i = estimator(y, which.min(resids))
p_i = c(1, rev(y)[1:length(phi)]) %*% phi_i
return (prediction - p_i)^2
}
grid_search(alpha, phi, sigma2, 1:8)
grid_search <- function(alpha, phi, sigma2, i_vec) {
resids = c()
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
prediction = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
phi_i = estimator(y, which.min(resids))
p_i = c(1, rev(y)[1:length(phi_i)]) %*% phi_i
return (prediction - p_i)^2
}
grid_search(alpha, phi, sigma2, 1:8)
alpha
phi
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
prediction = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
i_vec = 1:8
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
resids
which.min(resids)
phi_i = estimator(y, which.min(resids))
phi_i
p_i = c(1, rev(y)[1:length(phi_i[[1]])]) %*% phi_i[[1]]
phi_i[[1]]
c(1, rev(y)[1:length(phi_i[[1]])])
p_i = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
p_i
prediction
(prediction - p_i)^2
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
prediction = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
phi_i = estimator(y, which.min(resids))
p_i = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
return (prediction - p_i)^2
}
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 5000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
prediction = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
phi_i = estimator(y, which.min(resids))
p_i = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
return (prediction - p_i)^2
}
b = c()
for (i in 1:1000) {
b = c(b, grid_search(alpha, phi, sigma2, 1:8))
}
hist(b)
mean(b)
1:1
#-------------------------------------------------------------
resid_generator <- function(y, i_vec) {
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])
resids = c(resids, y_resid_k)
}
return (resids) }
alpha
phi
resid_generator(y, 1:1)
resid_generator(y, 1:1)
hm = c()
for (i in 1:100) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
hm = c(hm , resid_generator(y, 1))
}
hm
mean(hm)
hist(hm)
hm = c()
for (i in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
hm = c(hm , resid_generator(y, 1))
}
hist(hm)
mean(hm)
hm = c()
for (i in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
hm = c(hm , resid_generator(y, 2))
}
hist(hm)
mean(hm)
hm = c()
for (i in 1:1000) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
hm = c(hm , resid_generator(y, 3))
}
mean(hm)
hist(hm)
#-------------------------------------------------------------
resid_generator <- function(y, i_vec) {
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
return (resids) }
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, i_vec)
phi_i = estimator(y, which.min(resids))
prediction = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
real = c(1, rev(y)[1:length(phi)-1]) %*% c(alpha, phi)
return (prediction - real)^2
}
grid_search(alpha, phi, sigma2, 1:8)
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, i_vec)
phi_i = estimator(y, which.min(resids))
prediction = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
real = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
return (prediction - real)^2
}
grid_search(alpha, phi, sigma2, 1:8)
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, i_vec)
phi_i = estimator(y, which.min(resids))
prediction = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
real = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
return ((prediction - real)^2)
}
grid_search(alpha, phi, sigma2, 1:8)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, i_vec)
resids
which.min(resids)
phi_i = estimator(y, which.min(resids))
phi_i
prediction = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
real = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi)
real = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi) + rnorm(1, 0, sigma2)
prediction
real
((prediction - real)^2)
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, i_vec)
phi_i = estimator(y, which.min(resids))
prediction = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
real = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi) + rnorm(1, 0, sigma2)
return ((prediction - real)^2)
}
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 2000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, i_vec)
phi_i = estimator(y, which.min(resids))
prediction = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
real = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi) + rnorm(1, 0, sigma2)
return ((prediction - real)^2)
}
b = c()
for (i in 1:1000) {
b = c(b, grid_search(alpha, phi, sigma2, 1:8))
}
hist(b)
b
grid_search <- function(alpha, phi, sigma2, i_vec) {
y = arima.sim(n = 2000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, i_vec)
phi_i = estimator(y, which.min(resids))
prediction = c(1, rev(y)[1:(length(phi_i[[1]])-1)]) %*% phi_i[[1]]
real = c(1, rev(y)[1:length(phi)]) %*% c(alpha, phi) + rnorm(1, 0, sigma2)
return ((prediction - real)^2)
}
b = c()
for (i in 1:1000) {
b = c(b, grid_search(alpha, phi, sigma2, 1:8))
}
hist(b)
mean(b)
cor(a)
#-------------------------------------------------------------
resid_generator <- function(y, i_vec) {
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
return (resids) }
loss_values <- function(alpha, phi, sigma2) {
loss = data.frame("loss_1" = NA,
"loss_2" = NA,
"loss_3" = NA,
"loss_4" = NA,
"loss_5" = NA,
"loss_6" = NA,
"loss_7" = NA,
"loss_8" = NA,
"min_index" = NA)
for (k in 1:2000)
{
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = resid_generator(y, 1:8)
loss = rbind(loss, c(resids, which.min(resids)))
}
return (loss[-1,])
}
alpha <- 5
phi <-  c(0.8, .25, -0.4, 0.1) # phi_1, phi_2, phi_3. order matters!
phi = isStationer(phi)
sigma2 <- 1.2
a = loss_values(alpha, phi, sigma2)
cor(a)
summary(a)
hist(a$min_index)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
phi
alpha
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 3)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 1)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 1)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 1)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 1)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 1)
estimator(y, 6)
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
estimator(y, 1)
estimator(y, 6)
head(loss)
head(a)
head(rev(y))
row_number = length(y) - modelling_params + 1
vec = matrix(rev(y)[1 : modelling_params+1], ncol = modelling_params)
vec
rev(y)[1]
rev(y)[0]
rev(y)
modelling_params
rev(y)[1 : modelling_params+1]
rev(y)
head(rev(y))
rev(y)[1]
head(rev(y))
rev(y)[1 : modelling_params+1]
vec = matrix(rev(y)[1 : modelling_params + 1], ncol = modelling_params)
i =2
i = 3
vec = rbind(vec, matrix(rev(y)[i : (i + modelling_params - 1)], ncol=modelling_params))
vec
k = 1
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
resids
resids = c()
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
resids
k = 2
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
resids
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
resids
y = arima.sim(n = 1000, list(ar=c(phi)), sd=sqrt(sigma2), mean=alpha)
resids = c()
for (k in i_vec) {
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
resids = c(resids, y_resid_k)
}
resids
k = 2
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
y_resid_k
phi_k
estimator(y, k)
estimator(y, 6)
estimator(y, 1)
rev(y)[1]
phi_k
x %*% phi_k
k = 4
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
x %*% phi_k
rev(y, 2)
rev(y)[2]
phi_k
k = 2
phi_k = estimator(y, k)[[1]]
x = c(1,rev(y)[2:(k+1)])
y_resid_k = (x %*% phi_k - rev(y)[1])^2
y_resid_k
estimator(y, k)
setwd("C:/Marci/CEU/ThesisDONTUSETHIS/CODE/R")
library(optimParallel)
path <- function(m,n) {
return(paste0("MN-SEIR-MODELS/m", m, "n", n, ".R"))
}
parscale.parameters <- function(par, scale, fix = 1){
#check if length of scale is equal to par
if(length(par) !=  length(scale)){
stop("parscale.parameters has parameter and scaling vectors of different sizes.")
}
if(any(scale == 0)){
scale[scale == 0] <- 1
}
#parscale fixes the larged par/parscale value to deviate only 10 percent, others can then vary
#get fixed and maximal value
fix.value <- par[fix]
if(fix.value == 0){
fix.value <- 1
}
max.value <- abs(par[which.max(abs(par))[1]])
if(max.value == 0){
print("Warning: Vector contains only zeroes. Scaling is set to a default of 1.")
max.value <- 1
}
#fill in scaling vector
par.scale <- scale/(0.1 * fix.value * max.value)
par.scale[fix] <- 1 / max.value
return(abs(par.scale))
}
parameter_values <- c(
min_contract_size=10,
lambda=10,
b=0.08,
q=0.9,
sigma=1/5,
gamma=1/14,
tau_d=1,
d_I=1
)
m
m=1
n=1
source(path(m,n))
initial_params = parameter_values
cl <- makeCluster(detectCores())
optimum <- optimParallel(par=initial_params,
fn=mn_optim,
lower=c(0.1,0.1, 0.001, 0.001, 0.05, 0.05, 0.001, 0.001),
control=list(maxit=150, trace=6, fnscale=25000000),
parallel=list(cl=cl))
View(mn_optim)
